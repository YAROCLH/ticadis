1.1
*Distinguiendo y justificando sistemas*

	La identificacion del sistema es el resultado de un proceso de distincion influenciado por la capacidad del observador de distinguir cosas.
	Por justificacion se entiende que el sistema identificado cumple determinados conceptos que lo caracterizan por ejemplo: finalidad, objetivo, retroalimentacion etc.


-La justificacion de un sistema 

	Objetivo:
		Un sistema se justifica cuando se le ha asignado la capacidad de tener un objetivo, pero hay que tener en cuenta que siempre el objetivo es asignado  por el observador
			-Se dice que un sistema posee un objetivo asignado externamente por un observador cuando se desconoce o no se comprende cual es su finalidad  y es dicho observador quien entiende y establece cual "podria" ser su objetivo.
			Este observador debe ser cuidadoso al asignar el objetivo ya que un observador con poca experiencia, podria comprender un sistema y su objetivo desde un limitado campo de vision o de opciones.

	Frontera:
		Las fronteras e un sistema son las que delimitan "lo que esta dentro y fuera del sistema", para saber que esta dentro y que esta afuera hay que hacer 2 preguntas
			*¿que debe controlar el sistema?
			*¿que puede controlar el sistema?
		-Esta dentro del sistema todo aquello que debe y puede controlar el sistema

		-Esta fuera todo aquello que no debe y no puede controlar el sistema y pasa a ser parte del entorno o medio externo al sistema.

		-Estara en la frontera todo aquello que debe controlar pero no puede controlar y por lo tanto debe influir para procurar hacerlo con interacciones de salida hacia el entorno que es donde se encuentran esos elementos que deben controlarse.

		-Estara en la frontera todo aquello que no debe controlar pero que si controla, en estos casos de debe evaluar si se debe dejar dentro o fuera del sistema, pues los elementos involucrados pueden ser parte de "otro sistema".


	Interacciones:
		Si "ver" el sistema es complejo, el ver las interacciones lo es mas.
		El sistema es definido por un observador o modelador. Puede que exista antes de que el modelador observe la realidad o no. En este momento, cuando se define o se identifica el sistema es cuando el modelador debe distinguir suspartes,las interacciones entre estas partes y las interacciones de las partes con el entorno.	Pero esto lo hace a un nivel abstracto, basado en los conceptos que le permiten identifiacr partes e interacciones.
		Es decir en este nivel de observacion el sistema es una concepcion mental.Nada mas.

-Interaciones entre sistemas y estructuras
		...
		...
		...


*Productos informaticos en un contexto organizacional*
	Un producto informatico alude a un conjunto de componentes de diversos tipos:
		Un software que responde a una necesidad, un hardware donde opera el software, personas que operan el software y hardware.
	Todos estos elementos, cuya mision es tratar la informacion (tomar deciciones,procesar datos,etc), y ademas son los elementos disponibles para dar forma al sistemas.
	Aqui surge el real conflicto, construir un sistema a nivel abstracto y conceptual para luego construir materialmente una estructura que sea bien recibida por la estructura de otros sistemas relacionados y con la estructura del propio entorno.
	En una empresa, el  producto informatico debe insertarse estructuralmente en la estructura de la empresa.

-La insercion estructural
	Parte del modelado es estudiar la capacidad de que el producto informatico sea aceptado admitido y asimilado por una organizacion.No es raro ecuchar de sistemas rechazados o pobremente usados por motivos que no son tecnicos sino por "feeling" al software.
	Es mision del modelador preveer esta circunstancia, por lo cual el modelado demanda una comprension organizacional muy clara tanto a nivel procesos como a nivel personas.
	Por lo tanto se debe considerar todos los componentes sistemicos en forma de funciones y tareas a cumplir y proveer, sabiendo que habra interaccion con un medio que no espera siempre "con buenos ojos" un nuevo actor organizacional(el sistema).
	Las funciones y tareas que se hayan previsto se realicen de manera abstracta(en papel), asi aparecen actores y agentes (personas) que deben entrenarse, seleccionarse o eliminarse para que el sistema funcione y que sea aceptado.
	El analista debe concebir un sistema integrado a una realidad organizacional que no debe dañar sino hacerla mejor y al mismo tiempo el diseñador se preocupa de que todo encaje con los recursos existentes.

-La de-construccion organizacional
	Todo producto informatico desde el momento en que se concibe altera la organizacion receptora. Por este motivo el analista que realiza un alaisis de situacion actual debe ser cuidadoso para no descubrir  cuando termina su estudio que la organizacion no es la misma o que asimilo cosas derivadas del estudio.
	En todo este proceso los conceptos se re-hacen producto de nuevas visiones, las concepciones del trabajo como se hace cambia conforme aparecen nuevas formas de trabajo mas automatizadas, las personas ven variar su entorno y por ende su concepcion de la organizacion y sus metodos de trabajo.Todo esto se conoce como deconstrucion, que surge porque los conceptos varian gracias al desarrollo del producto informatico desde sus faces de analisis y diseño.



-LA ULTIMA PALABRA LA TIENE EL USUARIO
	-Se dice que cualquier esfuerzo de analisar y diseñar no sirve de nada si el usuario no acepta el producto
	Hay que ser cuidadoso pues el analisis involucra pensar en las personas que trabajaran y se veran afectadas por el producto informatico. Este usuario de debe ver como una figura que "nada sabe" y ademas de manera natural precisa ser entrenado en una nueva herramienta que muchas veces no espera ni desea.
	Los usuarios pueden ser divididos en 2 tipos 
		-Los usuarios , que como tal usan el artefacto o sistema, aportando y/o recibiendo datos, pero que desconoce ni le preocupa como funciona dicho sistema.
		-Los operadores, que permiten que el sistema opere de manera normal y revisan el comportamiento del mismo a nivel de:
			-sus variables de operacion( que miden su rendimiento, tiempos de respuesta, comportamiento, etc)
			-sus variables funcionales (que miden la capacidad de atender y satisfacer los requerimientos que justifican el sistema)
			-sus variables estrategicas (que analizan la existencia del sistema dentro de los procesosestrategicos de la empresa)

		Por ultimo esta el cliente que es quien financia el desarrollo puede ser usuario, operador  o no ocupar posicion alguna.

||---------------------CAPITULO 2.0---------------------||


 Analisis de sistemas y formas de modelamiento
**El analisis y el diseño en los modelos de desarrollo

Dentro de la ingenieria de software existen varios paradigmas para poder llegar a la contruccion final del producto, a esa serie de procedimientos y etapas se le denomina ciclo de vida.Este ciclo consiste en la concepcion, construccion, implementacion, y aplicacion del producto.
Estos paradigmas surgidos a finales de los años 60 e inicios de los 70, tambien llamados modelos de ciclo de vida del software,  son hoy el marco de referencia mas usado para describir el proceso de desarrollo de un proyecto informatico, describen los pasos a seguir, los puntos de terminacion, los subproductos a entregar y las fases a seguir.

Lo que se persigue con estos paradigmas es que el producto o solucion sea: 
	-Comprensible, claro y bien definido en sus detalles y en el trabajo realizado.
	-Bien construido
	-Robusto, en el sentido que puede seguir operando bajo condiciones de fallo o error.
	-Mantenible, o que se pueda ajustar a cambios futuros con facilidad 

La eleccion de la forma de desarrollo tiene un efecto significativo en el exito del proyecto. El paradigma es un proceso cuya adecuacion puede conducir a que el sistema se complete rapidamente, con un costo reducido, mayor calidad  y menor riesgo. Un proceso inadecuado conduce a esfuerzos de trabajo duplicados, problemas en la programacion y problemas de gestion.

A continuacion se describen los paradigmas mas representativos.

***Cascada o Tradicional***

Es el mas comun y se puede considerar el mas basico de todos los modelos de ciclo de vida, lo cual lo convierte en base para otros modelos.
Fue originalmente documentado en el año 1970, lo que lo convierte en el paradigma de ingenieria mas antiguo.
Este modelo expone que el desarrollo de software puede verse como una secuencia simple de fases encadenadas linealmente.
	-Especificacion de requerimientos
	-Planificacion
	-Moodelamiento
	-Construccion y desarrollo
	-Soporte (mantenimiento) del software completo

Estas fases en ocasiones cambian de nombre, pueden cambiar de orden o simplemente aparecer dentro de otras.No obstante, las fases indicadas siempre estan presentes y el modelo no pierde su linealidad ni su secuencia en las etapas o fases que se desea destacar.
En cada fase de debe realizar un proceso de verificacion y validacion
	Validacion: ¿estamos construyendo correctamente el producto?
	Verificacion: ¿estamos construyendo el producto correcto?

En este paradigma se utilizan las siguientes etapas:
	a)Ingenieria y Analisis del Sistema. Debido a que el software es parte de un sistema mayor el trabajo comienza estableciendo los requisitos de todos los elementos del sistema y luego asignando algun subconjunto de estos requisitos al software.

	b)Analisis de los requisitos del software. El proceso de recopilacion de los requisitos se centra en el software. El analista debe comprender el ambito de la informacion del software, asi como la funcion del mismo, el rendimiento y las interfaces requeridas.

	c)Diseño. El diseño del se enfoca en 4 atributos distintos: El diseño de los datos, la arquitectura de software, el detalle procedimental y la caracterizacion de la interfaz. 
	El diseño traduce los requisitos en una representacion del software con la calidad requerida antes de que comience la codificacion.

	d)Prueba. Una vez que se ha generado el codigo comienza la prueba, que se centra en la logica interna del software y en las funciones esternas, realizando pruebas que aseguren que la entrada definida produce los resultados que realmente se requieren.

	e)Mantenimiento. El software sufrira cambios despues de que se entrgue al cliente. Los cambios ocurriran debidi a que se hayan encontrado errores, a que el software deba adaptarse a cambios del entorno o debido a que el cliente lo requiera.

Caracteristicas y factores de decision
	Este paradigma funciona cuando los requerimientos del problema son razonables y bien comprendidos y el riesgo de inestabilidad es bajo. Aunque ultimamente se ha cuestionado la eficiencia del modelo en cascada, algunas de las razones son las siguientes:
		-Los proyectos reales raramente siguen un orden secuencial
		-Es dificil lograr que el cliente otorgue requerimientos explicitos a alto nivel
		-Se produce un caos cuando un error grave es detectado en una etapa muy avanzada del proyecto
		-El cliente debe ser paciente y esperar a ver el resultado final del proceso.

	Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:
	Caracteristicas:
		-Cada fase empieza cuando se ha terminado la anterior
		-Para pasar a la fase posterior es necesario haber logrado los objetivos de la previa
		-Es util como control de fechas de entregas
		-Al final de cada fase el personal tecnico y los usuarios pueden revisar el progreso

	Factores de Decision
		-Todos los requerimientos son conocidos al proncipio
		-Solo se desarrolla lo que se conoce bien
		-Los usuarios lo pruebas y añaden requerimientos
		-La aplicacion se hace por fases
		-Se hace una implementacion parcial y se prueba
		-Se utiliza en sistemas de complejidad baja


***PARADIGMAS DE DESARROLLO INCREMENTALES***

En situaciones en las que los requerimientos entan bien definidos, pero segun el alcance del proyecto existe la posibilidad de que el desarrollo no sea lineal, se provee de un paradigma que esta diseñado para producir software por incrementos. Para ello limitan la funcionalidad del software para que pueda ser revisado por el cliente y que este a su vez lo refine para tenerlo listo en la siguiente etapa del proyecto.

***Paradigma incremental***

En este paradigma el desarrollo se organiza en una serie de etapas, teniendo al final de cada etapa una version funcional y usable, con funcionalidades añadidas respecto al anterior incremento.
Para cada una de estas versiones se realiza en cada incremento una revision del analisis anterior, un diseño o revision del diseño existentes, la codificacion necesaria y las pruebas de las nuevas funcionalidades. De esta forma cada version cumple uno o mas requisitos que la version anterior y el numero de requisitos por cumplir se va reduciendo.
Cada version se usa como base para la siguiente version, teniendo en cuenta la retroalimentacion recibida por el cliente.
El paradigma incremental combina elementos del paradigma de cascada, aplicandolo de forma iterativa.Aplica secuencias lineales a mode de fases.Cada secuencia produce incrementos entregables del software
Las etapas del paradigma incremental son
	-Ingenieria y Analisis del Sistema
	-Analisis de los requerimientos
	-Diseño
	-Codificacion
	-Pruebas
	-Mantenimiento

*Caracteristicas y factores de decision*
Este paradigma es particularmente util cuando el personal no esta disponible para hacer una implementacion completa para la fecha acordada con el cliente.Los incrementos de etapa temprana pueden ser ejecutados por una menor cantidad de personas.
Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:
	Caracteristicas:
		-Se desarrolla el sistema por partes, incrementandolas y juntandolas despues
		-Los errores producidos en un incremento son solucionados para el siguiente incremento
		-Se involucra mas al usuario
		-Se basa en el modelo cascada
		-Se van añadiendo funcionalidades

	Factores de decision
		-Se debe tener claro algunos de los requerimientos al principio
		-Es menos arriesgado un sistema pequeño que uno grande
		-Dificil evaluar el costo total
		-Los errores en los requisitos se detectan tarde

***Paradigma RAD(Diseño Rapido de Aplicaciones)***
Es una adaptacion a alta velocidad del paradigma en cascada, en el que se enfatiza en un ciclo de vida extremadamente corto.
Las etapas del paradigma RAD son:
	-Modelado de Gestion
		El flujo de informacion entre las funciones de gestion que se modela de modo que responda a las siguientes preguntas:
			-¿Que informacion conduce el proceso de gestion?
			-¿Que informacion se genera?
			-¿Quien la genera?
			-¿A donde va la informacion?
			-¿Quien la procesa?

	-Modelado de Datos
		El flujo de informacion definido en la fase anterior se refina como un conjunto de objetos de datos necesarios.Se definen las caracteristicas de cada uno de los objetos y las relaciones entre estos

	-Modelado de Procesos
		Los objetos de definidos en la fase anterior se transforman para lograr el flujo de informacion necesario para implementar una funcion de gestion.Las descripciones del proceso se crean para añadir, modificar, suprimir o recuperar objetos de datos.

	-Generacion de Aplicaciones
		RAD asume que en lugar de crear el software con lenguajes de programacion se usan componentes de programas ya existentes cuando es posible o se crean componentes reutilizables cuando es necesario.En todos los casos se utilizan herramientas automaticas para facilitar la construccion del software.

	-Prueba y entrega
		Como el proceso de RAD enfatiza en la reutilizacion, ya se han comprobado muchis de los componentes de los programas.Esto reduce el tiempo de pruebas.Sin embargo se deben probar todos los componentes nuevos.

*Caracteristicas y factores de decision*

Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:
	Caracteristicas
		-El desarrollo del sistema completamente funcional se da en periodos cortos
		-Se utiliza un enfoque de construccion basado en objetos reusables

	Factores de decision
		-Se requiere comprender bien los requisitos y el ambito del proyecto
		-Necesita que el cliente y el desarrollador se comprometan en las actividades necesarias para completar un sistema en tiempo corto

No es adecuado en entornos tecnologicos nuevos o entornos que requieran interoperatividad con aplicaciones existentes pues no se dejara tiempo suficiente para pruebas de integracion.



***PARADIGMAS DE DESARROLLO EVOLUTIVOS***

Se sabe de antemano que el software al igual que todos los sistemas complejos evoluciona con el tiempo. Los paradigmas evolutivos se caracterizan por desarrollar versiones cada vez mas completas del software

***Paradigma de construccion de prototipos***

Este paradigma añade al final de cada evolucion una etapa de retroalimentacion con el cliente, para evaluar el resultado. Al final de cada fase es necesario descartar el prototipo anterior y comenzar de nuevo.
El uso de este paradigma se centra en la idea de ayudar a comprender los requisitos que plantea el usuario, sobre todo si este no tiene una idea muy clara de lo que desea.Tambien puede utilizarse cuando el ingeniero de software tiene dudas acerca de la viabilidad de la solucion pensada.
La version temprana de lo que sera el producto, con una funcionalidad reducida, podra incrementarse paulatinamente a traves de refinamientos sucesivos de las especificaciones del sistema, evolucionando hasta llegar al sistema final.

Al usar este paradigma, las etapas del ciclo de vida quedan modificadas de la siguiente manera:
	-Requerimientos, Analisis de requisitos del sistema y analisis de requisitos del software
	-Diseño, desarrollo e implementacion del prototipo
	-Codificacion y test unitario, prueba del prototipo, refinamiento iterativo del prototipo y refinamiento de las especificaciones del prototipo
	-Integracion del sistema, diseño e implementacion del sistema final
	-Explotacion, operacion y mantenimiento.

Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:

	Caracteristicas:
		-Solo se desarrollan los (requerimientos)?  que se conocen bien   |-------- ??? ---------|
		-Los usuarios lo prueban y añaden requerimientos
		-La aplicacion se hace por fases
		-Se hace una implementacion parcial y se prueba
		-Una vez identificados todos los requisitos mediante el prototipo, se construye el producto de ingenieria

	Factores de decision:
		-Todos los requerimientos no son conocidos al principio
		-Se utiliza en sistemas complejos
		-Exige disponer de una herramienta adecuada
		-Debe ser un sistema con el que se pueda experimentar
		-Debe desarrollarse rapidamente
		-Equipo de desarrollo reducido


Este modelo es util cuando la definicion de los requisitos es ambigua e imprecisa, porque permite el refinamiento, osea se pueden ampliar los requisitos y las especificacionse derivadas de la etapa anterior.
Uno de los problemas que se puede presentar es la deteccion tardia de requisitos, siendo su correccion tan costosa como en el caso de cascada.

*** Paradigma en Espiral ***

Este paradigma fue desarrollado usando las mejores caracteristicas tanto del ciclo de vida clasico(cascada), como el de la creacion de prototipos, añadiendo un nuevo elemento: "el analisis de riesgo".
El paradigma representado mediante una espiral define 4 actividades principales:
	-Planificacion. Determinacion de objetivos, alternativas y restricciones
	-Analisis de riesgo. Analisis de alternativas e identificacion de riesgos
	-Ingenieria. Desarrollo  del producto del siguiente nivel
	-Evaluacion del Cliente. Valoracion de los resultadoe de la ingenieria

Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:

	Caracteristicas:

		-Se construyen versiones del software cada vez mas complejas
		-Se eligen multiples alternativas y se escoge la mejor
		-La aplicacion se hace por fases
		-Se hace una implementacion parcial y se prueba
		-Despues de cada vuelta se realiza un prototipo

	Factores de Decision
		-Se utiliza cuando los requerimientos no se tienen claros
		-Es menos arriesgado un sistema pequeño que uno grande
		-Los errores producidos en un incremento son solucionados para el proximo incremento

Algunos rasgos distintivos de este modelo son 
	-El reconocimiento explicito de las diferentes alternativas
	-Identificacion de riesgos para cada alternativa desde el comienzo
	-Al dividir el proyecto en ciclos, al final de cada uno existe un acuerdo para los cambios que hay que realizar al sistema
	-El modelo se adapta a cualquier tipo de actividad adicional


***PARADIGMA DE DESARROLLO ADAPTATIVO O AGILE***

En años recientes, se han publicado diversas ideas en cuanto a formas de hacer el proceso de desarrollo de software mas ligero, agil de implementar y  con mejor respuesta a las necesidades del cliente.
Las siguientes metodologias han demostrado beneficios e terminos de "time to market", adaptabilidad a la evolucion de los requisitos, satisfaccion del cliente y entrega de productos rapidamente.

***eXtreme Programming(XP)

La principal diferencia con las metodologias tradicionales es que pone mas enfasis en la adaptabilidad que en la previsibilidad. La capacidad de adaptacion a los cambios de requisitos en cualquier punto del proyecto, experimentalmente demuestra ser una aproximacion mejor y mas realista que intentar definir todos los requisitos al comienzo del proyecto e invertir esfuerzos despues en controlar los cambios en los requisitos.

Los principios originales de la programacion extrema son: 
	Simplicidad
		La simplicidad es la base de XP, se simplifica el diseño para agilizar el desarrollo y facilitar el mantenimiento. Para mantener la simplicidad es necesaria la refactorizacion del codigo, esto para mantenerlo simple a medida que crece. Tambien se aplica la simplicidad en la documentacion, de esta manera el codigo debe comentarse en su justa medida, intentando que el codigo este autodocumentado, para ello se deben eleggir adecuadamente los nombres de las variables, metodos y clases.
		Aplicando la simplicidad junto con la autoria colectiva del codigo y la programacion por parejas se asegura que mientras mas grande se haga el proyecto, todo el equipo conocera mas y mejor el sistema completo.

 	Comunicacion
 		La comunicacion se realiza de diferentes formas. Para los programadores el codigo comunica mejor mientras mas simple seas, si el codigo es complejo hay que hacerlo inteligible.
 		El codigo autodocumentado es mas fiable que los comentarios ya que estos pronto quedan desfasados con el codigo a medida que es modificado.Debe comentarse solo aquello que no va a variar, por ejemplo el objetivo de una clase o la funcionalidad de un metodo.
 		En XP los programadores de comunican constantemente gracias a la programacion en parejas, la comunicacion con el cliente es fluida ya que el cliente forma parte del equipo de desarrollo.El cliente decide que caracteristicas tienen prioridad y siempre debe estar disponible para solucionar dudas.

 	Retroalimentacion
 		Al estar el cliente integrado, su opinion acerca del estado del proyecto se conoce en tiempo real y al realizarse ciclos muy cortos tras los cuales se muestran resultados, se minimiza el tenere que rehacer partes que no cumplen con los requisitos y ayuda a centrarse en lo que es mas importante.
 		Considerando los problemas de tenerr ciclos muy largos, meses de trabajo pueden descartarse debido a cambios en los criterios del cliente o malentendidos por parte del equipo de desarrollo.  El codifo tambien es una fuente de retroalimentacion, por ejemplo a travez de las pruebas unitarias se puede saber el estado del codigo.

 	 Coraje 
 		¿Por que coraje? Para los gerentes la programacion en parejas puede ser dificil de aceptar, parece como si la productividad se fuese a reducir a la mitad, ya que solo la mitad de los programadores estan escribiendo codigo. Entonces hay que tener coraje para confiar en que la programacion por parejas beneficia la calidad del codigo sin repercutir negativamete en la productividad.
 		La simplicidad es uno de los principios mas dificiles de adoptar. Se requiere coraje para implementar las caracteristicas que el cliente quiere ahora sin optar por un enfoque mas flexible que permita futuras modificaciones.

 	 Respeto
 	 	Los mienbros del equipo se respetan unos a otros, los programadores no pueden realizar cambios que hagan que las pruebas existentes fallen o que demore el trabajo de sus compañeros. Los miembros se respetan su trabajo porque siempre estan luchando por la alta calidad en el producto y buscando el diseño mas optimo para la solucion a traves de la refactorizacion del codigo.


 	El exito de XP radica en que enfatiza la implicacion del cliente final y el trabajo en equipo. Es el resultado de las adopcion de las mejores metodologias de desarrollo de acuerdo a lo que se pretende llevar a cabo con el proyecto y aplicarlo de manera dinamica durante el ciclo de vida del software.

Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:

 	Caracteristicas
 		-Pruebas unitarias continuas, frecuentemente repetidas y automatizadas, incluyendo pruebas de regresion.
 		-Desarrollo iterativo e incremental,  pequeñas mejoras una tras otra.
 		-Integracion del equipo de programacion con el cliente o usuario.
 		-Correccion de todos los errores antes de añadir nueva funcionalidad.
 		-Mas facil detectar errores
 		-Simplicidad de codigo

 	Factores de Decision
 		-Programacion en parejas, se recomienda que las tareas de desarrollo se lleven a cabo por dos personas en un mismo puesto.
 		-Se recomienda que un representante del cliente trabaje junto al equipo de desarrollo.
 		-La simplicidad y la comunicacion son extraordinariamente complementarias, con mas comunicacion resulta mas facil identificar que se debe y que no se debe hacer

 ***SCRUM***

 Define un marco para la gestion de proyectos, que se ha utilizado con exito durante los ultimos 10 años. Esta especialmente indicada para proyectos con un rapido cambio de requisitos.
 Sus principales caracteristicas son:
 	-El desarrollo se realiza mediante iteraciones, denominadas sprints, con una duracion de variable (normalmente 30 dias).El resultado de cada sprint es un incremento ejecutable que se muestra al cliente
 	-Reuniones a lo largo del proyecto, estas son de verdadera importancia, especialmente la reunion diaria de 15 minutos del equipo de desarrollo para coordinacion en integracion.

SCRUM	es un modelo de referencia que define un conjunto de practicas y roles y que pueden tomarse como punto de partida para definir el proceso de desarrollo que se ejecutara durante el proyecto.
Los roles principales en SCRUM son el "ScrumMaster" que mantiene los procesos y trabaja de manera similar al director del proyecto, el "ProductOwner", que representa a los "stakeholders" (clientes externos o internos), y el Team que incluye a los desarrolladores.
Scrum es un proceso en el que se aplican de manera regular un conjunto de buenas practicas para trabajar en equipo y obtener el mejor resultado posible de un proyecto.
En SCRUM se realizan entregas parciales y regulares del resultado final del proyecto, priorizadas por el beneficio que aportan al receptor del proyecto, por ello SCRUM esta especialmente indicado para proyectos en entornos complejos, donde se necesita obtener resultados pronto, donde los requisitos son cambiantes o poco definidos, donde la innovacion, la competitividad y la productividad son fundamentales.
SCRUM tambien se utiliza para resolver situaciones en que no se esta entregando al cliente lo que necesita, cuando las entregas se alargan demasiado, los costes se disparan o la calidad no es aceptable, cuando se necesita capacidad de reaccion ante la competencia, cuando es necesario identificar y solucionar ineficiencias sistemanticamente o cuando se quiere trabajar utilizando un proceso especializado en el desarrollo del producto.

En SCRUM se ejecutan bloques temporales cortos y fijos (iteraciones de 2 semanas o un mes naturales). Cada iteracion tiene que proporcionar un resultado completo, un incremento de producto final que pueda ser entregado con un minimo esfuerzo cuando el cliente lo solicite.

El proceso parte de la lista de  objetivos/requisitos priorizada del producto, que actua como plan del proyecto. En esta lista el cliente prioriza los objetivos balanceando el valor que le aportan respecto a su coste y quedan repartidos en iteraciones y entregas.
De manera regular el cliente puede maximizar la utilidad de que se desarrolla y el retorno de inversion mediante la replanificacion de objetivos que se realiza al inicio de cada iteracion.

Las actividades que se llevan a cabo en SCRUM son las siguientes:

A)Planificacion de la iteracion.
	El primer dia de la iteracion de realiza una reunion de planificacion de la iteracion, esta tiene 2 partes:
		-Seleccion de los requisitos. El cliente presenta al equipo la lista de requisitos priorizada del producto o proyecto, el equipo pregunta al cliente las dudas que surgen y selecciona los requisitos mas prioritarios que se compromete a completar en la iteracion.
		-Planificacion  de la iteracion. El equipo elabora la lista de tareas necesarias para desarrollar los requisitos. La estimacion de esfuerzo se hace de manera conjunta y los miembros del equipo se autoasignan las tareas.

B) Ejecucion de la iteracion.
	Cada dia el equipo realiza una reunion de sincronizacion(15 minutos maximo). Cada miembro del equipo inspecciona el trabajo que el resto esta realizando (dependencias entre tareas, progreso hacia el objetivo de la iteracion, obstaculos que pueden impedir este objetivo) para poder hacer las adaptaciones necesarias que permitan cumplir con el compromiso adquirido. En la reunion cada miembro del equipo responde a 3 preguntas:
		-¿Que he hecho desde la ultima reunion de sincronizacion?
		-¿Que voy a hacer a partir de este momento?
		-¿Que impedimentos tengo o voy a tener?
	Durante la iteracion el facilitador de encarga de que el equipo pueda cumplir con su compromiso y de que no se merme su productividad
		-Elimina los obstaculos que el equipo no puede resolver por si mismo
		-Protege al equipo de interrupciones externas que puedan afectar su compromiso o productividad.

C) Inspeccion y adaptacion.
	El ultimo dia de la iteracion se realiza la reunion de revision de la iteracion, esta tiene 2 partes:
		-Demostracion (4 hrs maximo). El equipo presenta al cliente los requisitos completados en la iteracion. En funcion de los resultados mostrado el cliente realiza las adaptaciones necesarias (desde la primera iteracion) replanificando el proyecto.
		-Retrospectiva (4 hrs maximo). El equipo analiza como ha sido su manera de trabajar y cuales son los problemas que podrian impedirle progresar adecuadamente, mejorando de manera continua su productividad. El facilitador se encargara de ir eliminando los obstaculos identificados.

Durante cada sprint, un periodo entre 15 y 30 dias, el equipo crea un incremento de software potencialmente entregable. El conjunto de caracteristicas que forman parte de cada sprint vienen del "Product BackLog", que es un conjunto de requisitos de alto nivel priorizados que definen el trabajo a realizar, estos requisitos se determinan durante el sprint planning. Durante el sprint nadie puede cambiar el BackLog, lo que significa que los requisitos estan congelados.
SCRUM permite la creacion de equipos autoorganizados impulsando la comunicacion verbal entre los miembros.

Uno de los principios clave de Scrum es reconocer que durante un proyecto los clientes pueden cambiar de idea sobre lo que quieren y necesitan y que los desafios impredecibles no pueden ser facilmente enfrentados de una forma predictiva y planificada. Por lo tanto se acepta que el problema no puede ser completamente entendido o definido, y hay que centrarse en entregar rapidamente y responder a requisitos emergentes.

Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:

	Caracteristicas
		-Cada sprint, un periodo entre 15 y 30 dias, es definido por el equipo.
		-El equipo crea un incremento de software potencialmente entregable.
		-Creacion de equipos autoorganizados impulsando la co-localizacion de todos los mienbors del equipo y la comunicacion verbal entre todos los mienbros y desciplinas involucradas en el proyecto.

	Factores de decision
		-Se reconoce que durante un proyecto los clientes pueden cambiar de idea sobre lo que quieren y necesitan.
		-El paradigma acepta que el problema no puede ser completamente entendido o definido, y centrondose en maximizar la capacidad del equipo de entregar rapidamente y responder a requisitos emergentes


***ADAPTATIVE SOFTWARE DEVELOPMENT(ASD)***

Sus principales caracteristicas son: iterativo, orientado a los componetes de software mas que a las tareas y toleracia a los cambios.
El ciclo de vida que propone tiene 3 fases esenciales:
	Especulacion, se inicia el proyecto y se planifican las caracteristicas del software
	Colaboracion, se desarrollan las caracteristicas
	Aprendizaje, se hace una revision de la calidad y se entrega al cliente. La revision de los componentes sirve para aprender de los errores y volver a iniciar el ciclo de desarrollo.

Esta metodologia se adapta al cambio en lugar de luchar contra el. Se basa en la adaptacion continua a circunstancias cambiantes. En ASD no hay un ciclo de planificacion-diseño-construccion del software sino un ciclo especular-colaborar-aprender.
Al igual que otras metodologias agiles, su funcionamiento es ciclico y reconoce que cada iteracion se produciran cambios e incluso errores. ASD hace enfasis en aplicar la adaptacion continua del proceso al trabajo.

Etapas de ASD

	Especulacion
		-Inicio, determinar la mision del proyecto
		-Determinacion del marco temporal del proyecto
		-Determinacion del numero de iteraciones y la duracion de cada una
		-Determinacion del objetivo de cada iteracion.
		-Asignacion de funcionalidad a cada iteracion

	Colaboracion
		En esta fase se realiza de manera concurrente el desarrollo del trabajo de construccion y gestion del producto, se centra la mayor parte del desarrollo manteniendo un componente ciclico. Una parte importante es la coordinacion que asegure que lo aprendido por un equipo se trasnmite al resto y no tenga que volver a ser aprendido por los otros equipos.

	Aprendizaje
		La ultima etapa termina con una serie de ciclos de colaboracion, para capturar lo que se ha aprendido, tanto positivo como negativo. Es un elemento critico para la eficacia de los equipos.
		En cada iteracion se revisa:
			-Calidad del producto, desde el punto de vista del cliente.Es la unica medida legitima de exito, ademas dentro de las metodologias agiles los clientes tienen un valor importante.
			-Calidad del producto, desde el punto de vista de los desarrolladores. Se trata de la evaluacion de calidad desde un punto de vista tecnico.
			-Funcionalidad desarrollada. Proceso de evaluacion para ver lo que se ha aprendido mediante el empleo de los procesos utilizados por el equipo
			-Estado del proyecto. Como paso previo a la planificacion de la siguiente iteracion, es el punto de partida para la construccion de la siguiente serie de caracteristicas.

Las caracteristicas que identifican este paradigma y sus elementos claves que nos permitan tomar una decision acertada segun el tipo de proyecto son:
	Caracteristicas
		-Trabajo orientado y guiado por la mision del proyecto.
		-Esta basado en la funcionalidad
		-Es guiado por los riesgos y el trabajo tolerante al cambio
		-Utiliza informacion disponible acerca de cambios para mejorar el comportamiento del software
		-La tercera fase del ciclo de vida, revision de los componentes, sirve para aprender de los errores y volver a iniciar el ciclo de desarrollo
		-Apunta hacia el Rapid Aplication Development (RAD), el cual enfatiza velocidad de desarrollo para crear un producto de alta calidad bajo mantenimiento involucrando al usuario lo mas posible

	Factores de decision
		-Anticipa cambios y trata automaticamente con ellos dentro de un programa en ejecucion, sin la necesidad de un programador
		-Promulga colaboracion,la interaccion de personas
		-Aunque el ciclo entre el aprendizaje y la especulacion es bueno permitiendonos entregar productos con alta calidad, la prolongacion de dicho ciclo por errores o cambios que no son detectados en reuniones anteriores afecta tanto la calidad como el costo del producto.
		-Es mas fiable usarla para proyectos pequeños y medianos.



***CRYSTAL METHODS (CM)

Se trata de un conjunto de metodologias caracterizadas por estar centradas en las personas que componen el equipo, ya que de ellas depende el exito del proyecto, y la reduccion al maximo del numero de artefactos producidos. Considera al desarrollo de software un juego cooperativo de invencion y comunicacion, limitado por los recursos a utilizar. 
El equipo de desarrollo es un factor clave, por lo que se debe invertir esfuerzos en mejorar sus habilidades y destrezas, asi como tener politias de trabajo en equipo definidas. Estas politicas dependeran del tamaño del equipo estableciendose una clasificacion por colores, por ejemplo Crystal Clear (3 a 8 miembros) y Crystal Orange(20 a 50 miembros)

Se toman muy en cuenta 2 parametros criticidad y tamaño del sistema. Los criterios empleados para la medicion de estos parametros son
	-Criticidad, Dimension de las perdidas que ocasionaria un malfuncionamiento del sistema
		1(c):Perdida de confort o usabilidad
		2(d):Perdidas economicas moderadas
		3(e):Perdidas economicas graves
		4(i):Perdida de vidas humanas
	-Dimension, Crystal determina el tamaño del sistema por el numero de personas empleadas en su desarrollo (6-20-40-80)

Es un modelo abierto a la adaptacion e introduccion de practicas de otros modelos agiles(XP, SCRUM). Y su gestion agil de proyectos no es una gestion de anticipacion(requisitos, diseño, planificacion, seguimiento) sino de adaptacion (vision, exploracion y adaptacion)
El desarrollo agil comprende 5 fases: Concepto, especulacion, exploracion, revision y cierre.

	*Fundamentos de CM*

		-Desarrollo iterativo e incremental, duracion maxima 4 meses, recomienda duracion entre 1 y 3 meses
		-Hace enfasis en la importancia de las personas sobre los procesos
		-Hace enfasis en la comunicacion directa

	*La gestion agil tiene como objetivos
		-valor
		-reduccion del tiempo de desarrollo, agilidad y fiabilidad

	*La gestion agil se basa en los principios del manifiesto agil y centra el valor
		-Más en las personas y su interaccion que en los procesos y herramientas
		-Más en los resultados que funcionan que en la documentacion exhaustiva
		-Más en la colaboracion con el cliente que el la negacion contractual
		-Más en la capacidad de respuesta al cambio que en el seguimiento de un plan


	Caracteristicas
		-El desarrollo del sistema funcional se da en periodos cortos
		-Se utiliza un enfoque de construccion basado en objetos reusables

	Factores de Decision
		-Se requiere comprender bien los requisitos y el ambito del proyecto
		-Necesita que el cliente y el desarrollador de comprometan en las actividades necesarias para completar un sistema en corto tiempo


***Toma de decision de un modelo de desarrollo de software***

Saber como escoger una metodologia de desarrollo ante un proyecto nuevo es algo complejo, pero es posible aislar un conjunto de criterios y sus cuantificadores para poder tener una base que facilite saber cual metodologia es la adecuada. 
Los criterios para seleccionar un modelo son:
	
*Disponibilidad de recursos
	Hace referencia a los recursos, equipo, matreriales calificados en el momento indicado y durante el tiempo requerido, los valores posibles son
		-Todos, que la organizacion dispondra todos los recursos necesarios para la ejecucion del proyecto
		-Algunos, que la organizacion dispondra algunos recursos necesarios para la ejecucion del proyecto

*Complejidad del proyecto
	Hace referencia al tamaño del sistema y la complejidad del mismo, donde segun la complejidad del proyecto aplica o no aplica una metodologia especifica. Los cuantificadores se obtienen en base a 2 parametros
		1)Calculo de complejidad , como puntos de funcion o COCOMO
		2)En base a la experiencia de las personas y de la madurez en los procesos empleados por la organizacion
	En este criterio las cuantificaciones posibles son: Alta, Media, Baja 

*Entendimiento de requisitos
	Se refiere a tener claro los requerimientos del sistema en la etapa inicial del proyecto, los cuantificadores posibles son
		-Especifico,  es necesario que el analista o diseñador tenga muy claro todos los reequerimientos de forma detallada
		-Bajo, No es necesario el entendimiento de todos los requerimientos al inicio del proyecto

*Conocimiento del dominio del problema
	Se refiere a el conocimiento del problema de negocio y su entorno, factores y procesos que participan.

*Manejo de la perspectiva de riesgos
	Hace referencia a tener en cuenta la definicion de riesgos y perspectivas de los mismos.

*Tiempo de desarrollo
	Hace referencia al tiempo requerido para el desarrollo del proyecto de software, los cuantificadores posibles son
		-Alto, mayor a un año
		-Medio, entre 6 meses y un año
		-Bajo, menos de 6 meses

*Costo del proyecto
	Costos tangible e intangibles para poder llevar a acabo el proyecto, adicionalmente los costes deben evaluarse en funcion de cualitativos como el coste de no-calidad, rentabilidad a obtener y la inversion en terminos organizacionales. Los cuantificadores posibles son: Alto, Medio y Bajo

*Calidad del software
	Hace referencia a que el paradigma asegura que los productos de software y los procesos son conforme a los requerimientos especificados y se ajustan a los planes establecidos, los cualificadores posible son: Alta y Baja

Documentacion
	Este criterio hace referencia a que el paradigma contempla el proceso para registrar la documentacion producida por un proceso o actividad del ciclo de vida, este proceso contempla el conjunto de actividades para planificar, diseñar, desarrollar, producir, editar, distribuir o mantener aquellos documentos que necesitan todos los involucrados, en este criterio las cuantificaciones son:
		Bajo, cuando no contempla la documentacion
		Medio, cuando contempla la documentacion pero de forma no tan estricta
		Alto, cuando contempla entre sus fases la documentacion

|------------------------CAPITULO 2.1---------------------------------|

EL ANALISIS Y EL DISEÑO EN LOS PROCESOS DE SOFTWARE

Los procesos de software se clasifican en 3 tipos: principales, de soporte y de la organizacion, los de soporte y de organizacion deben existir independientemente del proyecto ejecutado. Los procesos principales se instancian de acuerdo con la situacion particular

La norma ISO/IEC 12207 establece un proceso de ciclo de vida para el software que incluye procesos y actividades que se aplican desde la definicion de requisitos, adquisicion y configuracion de los servicios del sistema, hasta la finalizacion de su uso. El objetivo de este estandar es proporcionar una estructura comuna para que compradores, proveedores, desarrolladores, operadores, gestores, etc usen un lenguaje comun. Y este lenguaje comun se establece en forma de procesos bien definidos.
La estructura de este estandar has sido concebida de manera flexible y modular de manera que pueda ser adaptada a las necesidades de cualquiera que lo use, para conseguirlo se basa en 2 principios: modularidad y responsabilidad. Con la modularidad se pretende conseguir procesos con un minimo acoplamiento y una maxima cohesion y en cuanto a la responsabilidad se busca establecer un responsable para cada proceso, facilitando la aplicacion del estandar en proyectos en los que pueden existir distintas personas u organizaciones involucradas.

***Procesos Principales***


Los procesos principales del ciclo de vida son 5, las actividades y tareas en los procesos principales son responsabilidad de la organizacion que lo inicia y lo  ejecuta. Los procesos son:

	1)Proceso de adquisicion. 
		Define las actividades del adquiriente,la organizacion que adquiere un sistema o producto de software.
		El proceso comienza con la identificacion de la necesidad de adquirir uns sistema o software, continua con la preparacion y publicacion de una solicitud de propuesta, la seleccion del proveedor, la gestion del proceso de adquisicion hasta la aceptacion del sistema.
		La organizacion que tiene la necesidad, puede ser llamado el propietario, puede contratar todas o parte de las actividades de la adquisicion a un tercero. Entonces el adquiriente puede ser el propietario o un tercero.
		El adquiriente gestiona el proceso, establece una infraestructura basada en el proceso que se sigue  y gestiona el proceso a nivel organizacion.
		Este proceso consiste en las siguientes actividades
			-Inicio
			-Preparacion de la solicitud de propuesta
			-Preparacion y actualizacion del contrato
			-Seguimiento del proveedor
			-Aceptacion y finalizacion


	2)Proceso de suministro. 
	Define las actividades del proveedor, organizacion que proporciona el sistema. 
	El proceso se puede iniciar ya sea por la descicion de preparar una oferta para contestar una solicitud de propuesta de un adquiriente, o por el inicio de el contrato con el adquiriente para proporcionarle un sistema. El proceso continua con la determinacion de los procedimientos y recursos para asegurar el proyecto, incluyendo la preparacion y ejecucion de los planes del proyecto hasta la entrega del sistema.
	Este proceso consta de las siguientes actividades
		-Inicio
		-Preparacion de la respuesta
		-Contrato
		-Planificacion
		-Ejecucion y control
		-Revision y evaluacion
		-Entrega y finalizacion


	3)Proceso de desarrollo.
		Contiene las actividades y tareas del desarrollador, las actividades para el analisis de los requerimientos, diseño, codificacion, integracion, pruebas e instalacion. Puede contener actividades a nivel de sistema si se estipula en el contrato. El desarrollador lleva a cabo o soporta las actividades de este proceso de acuerdo al contrato.
	Este proceso consta de las siguientes actividades 
		-Implementacion del proceso
		-Analisis de los requerimientos del sistema
		-Diseño de la arquitectura del sistema
		-Analisis de los requerimientos de software
		-Diseño de la arquitectura del software
		-Diseño detallado del software
		-Codificacion y pruebas
		-Integracion del software
		-Pruebas de calificacion del software
		-Integracion del sistema
		-Pruebas de calificacion del sistema
		-Instalacion del software
		-Apoyo a la aceptacion del software


	4)Proceso de operacion. 
	Define las actividades del operador, organizacion que proporciona el servicio de operar un sistema en su entorno real.
	El proceso cubre la operacion del producto software y el apoyo a la operacion de los usuarios. Ya que la operacion del producto software esta integrada a la operacion del sistema , las actividades de este proceso hacen referencia al sistema.
	Este proceso consta de las siguientes actividades
		-Implementacion del proceso
		-Pruebas de operacion
		-Operacion del sistema
		-Soporte al usuario

	4)Proceso de mantenimiento. 
	Define las actividades del responsable de mantenimiento, organizacion que proporciona el servicio de mantenimiento del producto informatico.
	Este proceso se inicia cuando el producto de software sufre modificaciones en el codigo y la documentacion asociada, debido a un problema o  a la necesidad de mejora o adaptacion. El objetivo es modificar el software preservando su integridad.Este proceso incluye la migracion y retirada del software, el proceso termina con la retirada del software
	Este proceso consta de las siguientes actividades
		-Implementacion del proceso
		-Analisis de problemas y modificaciones
		-Implementacion de las modificaciones
		-Revision/aceptacion del mantenimiento
		-Migracion
		-Retirada del software

***Procesos de apoyo o soporte***
Un proceso de apoyo es el que apoya a otro proceso como parte esencial del mismo, con un proposito bien definido que contribuye al exito y a la calidad del proyecto.
Hay 8 procesos de apoyo del ciclo de vida:


	*Proceso de documentacion
		Define las actividades para el registro de la informacion producida por un proceso del ciclo de vida. Contiene el conjunto de actividades para planificar, desarrollar, diseñar, producir, editar, distribuir y mantener aquellos documentos que necesitan todos los involucrados tales como gerentes, ingenieros y usuarios.

	*Proceso de gestion de la configuracion
		Define las actividades de la gestion de la configuracion. La gestion de la configuracion es el proceso de aplicar procedimientos tecnicos y administrativos a lo largo del ciclo de vida del software para 
		-Identificar, definir y establecer la linea base de los elementos de un sistema
		-Controlar modificaciones y releases de los elementos
		-Registrar e informar del estado de los elementos y peticiones de modificacion
		-Asegurar la completitud, consistencia y correccion de los elementos
		-Controlar el almacenamiento, manipulacion y entrega de los elementos

	*Proceso de aseguramiento de la calidad 
		Define las actividades para asegurar que los productos de software y los procesos son conformes a sus requerimientos especificados y se ajustan a lo establecido. Revision conjunta, Auditoria, Verificacion y Validacion pueden ser usadas como tecnicas para el aseguramiento de la calidad.
		Para que el aseguramiento de la calidad sea imparcial se necesita libertad organizativa y autoridad respecto a las personas responsables del desarrollo.
		Este proceso consta de las siguientes actividades.
			-Implementacion del proceso
			-Aseguramiento del producto
			-Aseguramiento del proceso
			-Aseguramiento del sistemas de calidad

	*Proceso de Verificacion
		Define las actividades para verificar hasta un nivel de detalle dependiente del proyecto de software.Determinar si los productos de  una actividad cumplen con los requerimientos o condiciones que tienen impuestas por las actividades precedentes.

	*Proceso de Validacion
		Es un proceso para determinar si los requerimientos y el sistema cumplen con su uso especifico previsto, se puede llevar a cabo en etapas tempranas y puede usarse como parte del apoyo a la aceptacion del producto.

	*Proceso de revision conjunta
		Define las actividades para evaluar el estado y productos de una actividad.
		Este proceso puede ser empleado por cualquiera de las 2 partes, donde una de las partes revisa a la otra parte  de manera conjunta.
		Este proceso consta de las siguientes actividades
			-Implementacion del proceso
			-Revisiones de la gestion del proyecto
			-Revisiones tecnicas

	*Proceso de Auditoria
		Es un proceso para determinar el cumplimiento con los requerimientos, planes y contrato, segun aplique.
			-Implementacion del proceso
			-Auditoria

	*Proceso de Resolucion de problemas
		Es un proceso para analizar y resolver problemas (incluidas las no conformidades), cualquiera que sea su naturaleza u origen, que se descubran durante la ejecucion de los procesos de desarrollo, operacion, mantenimiento u otros. El objetivo es proporcionar un mecanismo que asegure que todos los problemas descubiertos se analizan y resuelven.
			-Implementacion del proceso
			-Solucion de problemas

Las actividades y tareas en un proceso de apoyo o soporte son responsabilidad de la organizacion que lleva acabo dicho proceso.


***Procesos de la Organizacion***

Estos procesos son empleados por una organizacion para establecer e implementar una infraestructura constituida por procesos y personal asociado al ciclo de vida y para mejorar continuamente esta infraestructura.
Los procesos organizativos son:


*Proceso de gestion 
	Contiene las actividades genericas y tareas que pueden ser empleadas por cualquier parte que tenga que gestionar sus respectivos procesos. El gerente es responsable de la gestion del producto, proyecto, tareas, procesos aplicables.
	Este proceso consta de las siguientes actividades
		-Inicio y definicion del alcance
		-Planificacion
		-Ejecucion y control
		-Revision y evaluacion
		-Finalizacion

*Proceso de infraestructura
	Es un proceso para establecer y mantener la infraestructura que necesita cualquier otro proceso. La infraestructura puede incluir hardware, software, herramientas, tecnicas, normas e instalaciones para el desarrollo, operacion o mantenimiento
	Este proceso consta de las siguientes actividades
		-Implementacion del proceso
		-Establecimiento de la infraestructura
		-Mantenimiento de la infraestructura

*Proceso de formacion o recursos humanos 
	Es un proceso para proporcionar y mantener personal capacitado.  Los procesos principales del ciclo de vida dependen en gran medida de personal entendido y competente. Por lo tanto es imprescindible que la formacion del personal este planificada e implementada de manera temprana, para que este disponible personal capacitado en el momento en que el producto de software se suministra,desarrolla, opera o mantiene.
	Este proceso consta de las siguientes actividades
		-Implementacion del proceso
		-Desarrollo del material de formacion
		-Implementacion del plan de formacion


*Relacion entre procesos*

	-Bajo el punto de vista del contrato, las partes adquiriente y proveedor negocian y se someten a un contrato empleando el proceso de adquisicion y suministro, respectivamente
	-Bajo el punto de vista de gestion, el adquiriente, proveedor desarrollador, operador, responsable del mantenimiento u otras partes gestionan sus propios procesos
	-Bajo el punto de vista de la operacion, el operador proporciona el servicio de operacion del software para sus usuarios
	-Bajo el punto de vista de ingenieria, el desarrollador o responsable del mantenimiento llevan a cabo sus respectivas tareas de ingenieria para producir o modificar los puntos de software
	-Bajo el punto de vista de apoyo, las partes(gestion de la configuracion, aseguramiento de la calidad) proporcionan servicios de apoyo a otros para completar tareas unicas y especificas
Los procesos organizativos se emplean a nivel corporativo para establecer e implementar la estructura compuesta por los procesos y personal asociados al ciclo de vida y mejorarlos continuamente.


2.3 ***TIPOS DE ANALISIS Y DISEÑO INFORMATICO***

El analisis puede dividirse en cuatro areas:
	-Reconocimiento del problema
	-Evaluacion y sintesis
	-Especificacion
	-Revision

Inicialmente, el analista estudia la especificacion del sistema(si existe) y el plan de proyecto. Es importante comprender el contexto del sistema y revisar el ambito de los programas que se uso para generar las estimaciones de la planificacion.
Se debe establecer la comunicacion necesaria para el analisis, de formas que se asegure el reconocimiento del problema. El analista debe estar en contacto con el equipo tecnico y el de gestion del usuario/cliente y con la empresa que va a desarrollar el software.

La evaluacion del problema y la sintesis de la solucion es la siguiente area principal del trabajo de analisis. El analista debe evaluar el flujo y estructura de la informacion, refinar en detalle todas las funciones del programa, establecer las caracteristicas de la interfaz del sistema y descubrir las ligaduras del diseño. Cada una de estas tareas sirve para descubrir el problema de forma que pueda sintetizarse un enfoque o solucion global. Las tareas asociadas con el analisis y especificacion existen para dar una representacion del programa que pueda ser revisada y aprobada por el cliente.

Lo ideal seria que el cliente desarrollara una especificacion de requerimientos por si mismo, esto raramente sucede, por lo que casi siempre esta especificacion se desarrolla entre el cliente y el tecnico. Una vez que se han descrito las funcionalidades basicas, comportamiento, interfaz e informacion, se especifican los criterios de validacion para demostrar una comprension de una correcta implementacion de los programas.
Estos criterios sirven como base para hacer una prueba durante el desarrollo de los programas. Para definir las caracteristicas y atributos del software se escribe una especificacion de requerimientos formal.

** Los Tipos de Analisis **

1.-Analisis de requerimientos

	El analisis de requerimientos pretende resolver la pregunta ¿Cual es el problema?, cuya respuesta debe permitir identificar:
		-Las funciones a desarrollar y el dominio de informacion a manejar
		-Las posibles ampliaciones
		-El monto y el tipo de documentacion
		-Las caracteristicas y funciones de desempeño, comportamiento, rendimiento y las interconexiones logicas
		-El estudio de factibilidad tecnico, social, economico y politico.

	Las tareas y documentos (o informacion) a generar son:
		-Reconocer el problema: Necesidades, Alcance general, Plan del problema, Analisis de riesgos, Especificacion del problema.
		-Evaluacion y Sintesis: Alcance detallado, flujos de informacion, restricciones, prototipos.
		-Modelamiento del Proyecto: Criterios de validacion, de acuerdo a las alternativas se escoge una y se realiza un modelamiento extensivo sobre ella.
		-Especificacion: Modelamiento del sistema, donde se especifica todo lo que se requiere
		-Revision: Ajustes, detalles o errores, Necesidades nuevas del usuario, Ajustes de calendarizacion de riesgos, Monitoreo y Control.

	Puede dividirse en 5 areas de esfuerzo:
		-Reconocimiento del problema
		-Evaluacion y sintesis
		-Modelado
		-Especificacion
		-Revision

	El modelo de analisis debe lograr 3 objetivos primarios
		-Describir lo que quiere el cliente
		-Establecer una base para la creacion de un diseño de software
		-Definir un conjunto de requisitos que se pueda validar una vez que se construye el software

		El centro de el modelo de analisis es el diccionario de datos que es un almacen de defiiciones de todos los objetos de datos consumidos y producidos por el software.
		Tres tipos de diagramas rodean este diccionrio.
			-Diagrama entidad relacion, representa las relaciones entre los objetos de datos, actividad de modelado de datos
			-Diagrama de flujo de datos, sirve para 
				*Proporcionar una indicacion de como se transforman los datos a medida que se avanza en el sistema.
				*Representar las funciones que transforman el flujo de datos, proporcionar informacion adicional.
			-Diagrama de transicion de datos, indica como se comporta el sistema como consecuencia de sucesos externos

	La IEEE divide los requerimientos en funcionales y no funcionales
		-Funcionales: condicion o capacidad de un sistema requerida por el usuario para resolver un problema o alcanzar un objetivo
		-No funcionales: condicion o capacidad que debe poseer un sistema para satisfacer un contrato, un estandar una especificacion u otro documento formalmente impuesto. Para realizar bien el desarrollo de software es esencal realiar una especificacion completa de los requerimientos de los mismos

	Independientemente de lo bien diseñado que este, un sistema pobremente especificado descepcionara al usuario y hara fracasar el desarrollo.
	La tarea del analisis de los requerimientos es un proceso de descubrimiento y refinamiento, el ambito del sistema, establecido durante la ingenieria del sistema es refinado en detalle.
	El cliente intenta reformular su concepto de la funcion y comportamiento del sistema en detalles concretos. Quien desarrolla el software actua como interrogador, consultor y el que resuelve los problemas.
	Debido a que el contenido de comunicacion es muy alto, abundan los cambios por mala interpretacion o falta de informacion.
	El analisis de requerimientos facilita especificar la funcion y comportamiento del sistema, refinar la asignacion de software y representar el dominio de la informacion que sera tratado por el programa, la representacion de la informacion y las funciones que pueden ser traducidas en datos, arquitectura y diseño procedimental. Finalmente, la especificacion de requerimientos sumiistra los medios para valorar la calidad del sistema una vez que se haya construido.

2.-Analisis de requisistos

	Los requisistos se presentan en una lista ordenada, cateforizada sugun su ambito, influencia, prioridad respecto al ambito y al entorno de la aplicacion de proyecto
	
		-Restricciones de diseño: requisitos que limitan el desarrollo al crear el producto. Se etiquetan como RD.x, siendo x el numero de requisito.

		-Requisitos funcionales: conjunto de requisitos que reflejan las funciones que debe prestar el sistema, se clasifican en
			*Requisitos nominales: requisito para el funcionamiento del sistema en situaciones normales. Se etiquetan como FN.x 
			*Requisitos no nominales: requisitos para el funcionamiento del sistema en situaciones especiales o condiciones de error, se etiquetan como FFx

		-Requisito de interfaz: conjunto de requisitos que definen las necesidades del sistema con otros sistemas y usuarios, se etiquetan como IN.x

		-Requisitos de calidad: exigencias de calidad que se piden explicitamente para el producto. En esta categoria se engloban los requisitos de rendimiento, accesibilidad, facilidad de uso, etc. Se etiquetan como CA.x

		-Requisitos de evlolucion: requisitos para el diseño del producto con el objetivo de facilitar la adaptacion a exigencias o condiciones que puedan surgir en el futuro. Se etiquetan como EV.x

		-Requisitos de proyecto: requisitos que afectan y condicionan el proceso de desarrollo. Se etiquetan como PR.x

		-Requisitos de soporte: requisitos que deben ser cumplidos por el cliente. Se etiquetan como SO.x

	Para cada requisito, se realiza una caracterizacion estructurada siguiendo el esquema:

		-Descripcion: descripcion corta del requisito, que se concreta en los siguientes apartados.
		-Importancia: pudiendo ser una de estas tres clases:
			*Esencial: el no cumplimiento del requisito provocaria el rechazo inmediato del producto por el cliente.
			*Condicional: el requisito mejoraria el resultado final del desarrollo, pero su no cumplimiento no produciria su rechazo
			*Opcional: el requisito no tiene que ser implementado, pero se puede tener en cuenta al realizar el diseño del producto.

		-Validez: este apartado demuestra la validez del requisito. Tiene 4 secciones, que estaran presentes solo en caso de ser relevantes para ese requisito en concreto.
			*Medible: describe como comprobar el grado de cumplimiento del requisito.
			*Alcanzable: justifica el realismo del requisito y propone de un modo general, un camino para lograr su consecucion
			*Relevante: justifica la presencia del requisito en el documento, indicando como colabora a definir la identidad global del producto
			*Especifico: extiende la descripcion del requisito, con referencias a casos de uso, si fuesen relevantes.

3.-Analisis Sistemico
	Analiza las funciones y relaciones que cumple cada una de las partes del un producto y la relacion entre estructura y el funcionamiento. Se trata de ver de que manera cada una de las partes contribuye a que el producto funcione.
	Las principales caracteristicas  de la moderna teoria de la adminsitracion basada en analisis sistemico son:
		-Punto de vista sistemico: la moderna teoria visualiza a la organizacion como un sistema constituido por 5 partes basicas: entrada, salida, proceso, retroalimentacion y ambiente.
		-Enfoque dinamico: el enfasis de la teoria moderna es sobre el proceso dinamico de interaccion que ocurre dentro de la estructura de un organizacion
		-Multidimensional y multinivelado: se considera a la organizacion desde un punto de vista micro y macroscopico, es micro cuando es considerada dentro de su ambiente y es macro cuando se analizan sus unidades internas.
		-Multimotivacional: un acto puede ser motivado por muchos motivos. Las organizaciones existen porque sus participantes esperan satisfacer ciertos objetivos a traves de ellas.
		-Probabilistico: la teoria moderna tiende a ser probabilistica. Con expresiones como "en general", "puede ser", sus variables pueden ser explicadas en terminos predictivos  y no con certeza.
		-Multidiciplinaria: busca conceptos y tecnicas de muchos campos de estudio, presenta una sintesis integradora de partes relevantes de todos los campos
		-Descriptivo: busca describir las caracteristicas de las  organizaciones y de la administracion. Se conforma con buscar y comprender los fenomenos organizacionales y dejar la escogencia de objetivos y metodos al individuo.
		-Multivariable: tiende a asumir que un evento puede ser causado por numerosos factores interrelacionados e interdependientes. Los factores causales podrian ser generados por la retroalimentacion.
		Adaptativa: un sistema adaptativo. La organizacion debe adaptarse a los cambios del ambiente para sobrevivir. Se genera como consecuencia una focalizacion en los resultados en lugar del enfasis sonbre el proceso a las actividades de la organizacion.

4.-Analisis informatico
	Analiza las descripciones de los elementos fisicos del sistema y sus relaciones y las relaciones que cumplen cada uno de los componentes que representan todos los tipos de elementos de software que entran en la fabricacion de aplicaciones informaticas y las diversas interacciones de un producto. Se trata de ver de que manera sera el despliegue de los componentes con sus respectivas relaciones, paraa garantizar que el producto funcione y la disponibilidad del mismo.
	Adicionalmente se analiza la disposicion fisica de los distintos nodos que componen un sistema y el reparto de los componentes sobre dichos nodos. Los estereotipos permiten precisar la naturaleza del equipo: Dispositivos, procesadores y memoria.


5.-Ingenieria de requisitos

Comprende todas las tareas relacionadas con la determinacion de las necesidades o de las condiciones a satisfacer para un software nuevo o modificado, tomando en cuenta los diversos requisitos de los inversores, que pueden entrara en conflicto entre ellos.

El proposito de la ingenieria de requisitos es hacer que los mismos alcancen un estado optimo antes de alcanzar la fase de diseño. Los buenos requisitos deben ser medibles, comprobables y sin ambiguedades o contradicciones.
Desde un punto de vista conceptual, las actividades son de 5 clases.
	-Obtener requisitos: a traves de entrevistas, comunicacion con clientes o usuarios. Para saber que es lo que solicita.
	-Analizar requisitos: detectar y corregir  las falencia comunicativas, transformando los requisitos obtenidos de entrevistas y requisitos en condiciones apropiadas para ser tratadas por el diseño
	-Docuemntar requisitos: igual que todas las etapas los requisitos deben estar debidamente documentados
	-Verificar los requisitos: consiste en comprobar el correcto funcionamiento de un requisito en la aplicacion
	-Validar los requisitos: comprobar que los requisitos implementados se corresponden con lo que inicialmente se pretendia

Actualmente el termino Analisis de Sistemas se suele confundir con el termino Analisis informatico.
	-El analisis de sistemas consiste ne determinar los objetivos y limites del sistema, caracterizar su estructura y funcionamiento, marcar las directrices que permitan alcanzar los objetivos propuestos y evaluar sus concecuencias. El analisis informatico puede dividirse en 4 areas: reconocimiento del problema, evaluacion y sintesis, especificacion y revision.
	-El analisis de sistemas es mas antiguo que el analisis informatico y podria decirse que el segundo es un caso, tipo o subconjunto del primero.
	-El analisis de sistemas busca analizar sistemas de cualquier tipo con fines de comprender, mejorar, revisar un fenomeno o un sistema del cual mucas veces no se conoce ni sus fronteras ni sus limites. El analisis informatico se centra en analizar un sistema ya acotado Y definido.
	-El analisis informatico parte de la base de que hay una falla, error o defecto. En un Analisis de sistemas puede no existir esta situacion, sino por ejemplo el deseo de comprender algo.
	-El analisis de sistemas sirve tanto para sistemas socio-tecnicos humanos-no-humanos como cualquier otro. El analisis informatico apunta a fenomenos organizacionales y de preferencia empresariales con una cierta base.


|-----------Resumen-----------|

1) Analisis de requerimientos
	Los requerimientos son aquellas cosas que  un cliente espera resolver o un usuario espera ver resuelto, y no es lo que el tecnico desea hacer. Cuando se hace este analisis se desea aclarar y dejar muy claro lo que quieren los usuarios,clientes y operadores. Se usan diversas herramientas de modelado y el analista debe tener un fuerte manejo de personas. Es una analisis situado solo en los requerimientos.

2) Analisis de requisitos
	Los requisitos son aquellos que el el sistema o solucion debe cumplir. Los requisitos suelen confundirse con los requerimientos pero estos en realidad son un subconjunto extendido de los requisitos.Cuando se hace el analisis de requisitos se desea explicar requisitos sin entrar en requerimientos. Aunque muchis requisitos se derivan directamente de requerimientos, otros surgen de la experiencia del analista. Suelen usarse diversas herramientas de modelado de orientacion a aspectos logicos y de implantacion de sistemas 

3) Analisis de sistemas
	Se interesa en aquello que requiere ser analizado y busca comprender como se relacionan las cosas tanto materialas como inmateriales que le componen. Los sistemas incorporan tanto requisitos como requerimientos pero no los determinan ni viceversa. Usa diversas herramientas de modelado que reflejen componentes e interacciones.

4) Analisis informatico
	Se interesa por lo fisico, el hardware de las cosas y su software. Se expresa o incluye o es parte de los requerimientos y se rige por requisitos. Este tipo de analisis se aplica asistemas tecnicos y socio-tecnicos pero no a sistemas humanos. Usa diversas herramientas de modelado con enfasis especifico en temas de implantacion e infraestructura.

5) Ingenieria de Requisitos
	Alude al conjunto de tareas cuyo fin es hacer que los requisitos conseguidos en el analisis sean lo mas completos, claros y bien definidos posible. Se basa en requerimientos, trabaja sobre sistemas tecnicos casi sin componentes humanos y obviamente entra en detalles informaticos.



***Tipos de diseño***

El diseño es una fase que pretende responder la pregunta ¿cual es la solucion?, solucion que se representa con detalle y precision en un modelo del sistema que permita ver de que manera se resuelven los problemas del usuario. Basicamente se traducen los requisitos de software a un conjunto de representaciones adecuadas a su posteior programacion.
Esta etapa representa el puente entre el proceso de especificacion y el diseño, involucra la identificacion de los componentes principales del sistema y su comunicacion.
Los tipos de diseño son:

1)Diseño arquitectonico
	Define la relacion entre los principales elementos estructurales  del software, los patrones de diseño que se pueden utilizar y las restricciones que afectan a la manera en que se pueden aplicar los patrones de diseño. El diseño arquitectonico se centra en la representacion de la estructura de los componentes del software, sus propiedades e interacciones. 
	Pretende estructurar el sistema, esto implica descomponer el sistema en varios subsistemas principales y el identificar la comunicacion entre estos subsistemas. Se establece un modelo de las relaciones de control entre las diferentes partes del sistema y los subsistemas identificados se descomponen en modulos.

	Modelos Arquitectonicos:
	Modelo estatico estructural
		Muestra los componentes principales del sistema
	-Modelo dinamico del proceso
		Muestra la estructura del proceso del sistema
	-Modelo de interfaz
		Define las interfaces de los subsistemas
	-Modelo de relaciones
		tales como un modelo de flujo de datos

2)Diseño de datos
	Transforma el modelo del dominio de informacion que se crea durante el analisis en las estructuras de datos que se necesitaran para implementar el software. El diseño de datos facilita la representacion de los componentes de datos de la arquitectura.
	El diseño de datos, tambien llamado arquitectura de datos, crea un modelo de datos y/o informacion que se representa con un nivel de abstraccion. Este modelo de datos es refinado en progresivas representaciones especificas de la implementacion.
	Al nivel de los componentes del sistema, el diseño de la estructura de datos y de los algoritmos asociados requeridos para su manipulacion, son la parte esencial en la creacion de aplicaciones de alta calidad. 
	Al nivel de aplicacion, la traduccion de un modelo de datos en una base de datos es el punto clave para alcanzar los objetivos de negocio del sistema.
	Al nivel de negocios, el conjunto de informacion almacenada en diferentes bases de datos facilita la mineria de datos o el descubrimiento de conocimiento que puede influir en el proximo exito de negocio.


3)Diseño de interfaz
	Describe la manera de comunicarse el software dentro de si mismo, con sistemas que interoperan dentro de el y con las personas que lo utilizan.
	Existen algunos diagramas que sirven para el diseño de interfaz:
		-Diagrama de Nassi - Schneiderman (N-S)
			Es una tecnica de especificacion de algoritmos que combina la descripcion textual, propia del pseudocodigo, con la representacion grafica del diagrama de flujo. Cuenta con un conjunto limitado de simbolos para representar los pasos del algoritmo, se apoya en expresiones de lenguaje natural, sin embargo se presta para ambiguedades.
		-Diagramas de interfaz de usuario
			Usado para imitar visualmente la interfaz del usuario del sistema usando formas, controle, etiquetas. Estas se organizan en el diagrama para describir su apariencia. Los elementos UI tambien se pueden rastrear a otros elementos de modelo vinculando el UI con la implementacion de base.


4)Diseño de componentes
	Transforma los elementos estructurales de la arquitectura del software en una descripcion procedimental de los componentes de software


***2.4 Del diseño del proyecto al diseño de la solucion pasando por el analisis***

La palabra diseño en el contexto de la informatica se refiere a  una fase muy concreta del desarrollo de sistemas, posterior al analisis. Esta fase se caracteriza por la conversion de los requerimientos especificados en el analisis a un lenguaje y a un posterior analisis centrado en la tecnologia a usar. Basicamente se trata de convertir cada requerimiento del analisis en un conjunto de especificaciones tecnicas y tecnologias que permitan al requerimiento ser implementado en un software.
Por diseño del proyecto se esta aludiendo al proceso intelectual, estrategico, a largo plazo de concebir el proyecto como un medio que no solamente se limite a terminar con un artefacto manufacturado, sino como un proceso donde una organizacion se enriquece de la experiencia del proyecto. Por ejemplo se trata de aprender de errores organizacionales al momento de ejecutar el proyecto, o de probar tecnologias que puede que no sirvan al artefacto a manufacturar pero si permite mejorar otros proyectos.
El diseño del proyecto es una accion organizacional y no un acto o descicion de un departamento, por eso suelen estar en manos de oficinas de proyectos que posean un nivel al menos medio de madurez.
En cuanto a un proceso de software, el diseño del proyecto considera que existe, pero no entra en detalles, los cuales deja en manos de los posteriores pasos. El proceso se puede decir es un componente en el diseño del proyecto pero no lo determina ni lo dictamina, pero si el proceso puede enriquecerse del diseño del proyecto, inclusive llegar a incorporarlo.
El diseño del proyecto analiza todos los escenarios futuros del proyecto en su ejecucion y posterior a su cierre, a si mismo todos los escenarios de uso del artefacto a manufacturar.
Por lo anterior el diseño del proyecto es la vision del acto proyectual futuro en el presente  y por ello debe organizar  prever escenarios de planificacion, analisis, de implementacion, de codificacion, de despliegue y de diseño informatico del propio proyecto y del artefacto a generar.
En ingenieria de software manejar esta vision mucho mas amplia de un proyecto, permite enriquecer la vision de los proyectos informaticos y de los proyectos de sistemas.



||---------------------CAPITULO 3.0---------------------||

ANALISIS ORGANIZACIONAL A TRAVES DEL MODELADO VISUAL DES SUS FACETAS Y DIMENSIONES

***Dimensiones del analisis organizacional***

Al aplicar una metodologia que implemente un ciclo de vida de software especifico se debe tener en cuenta los siguientes factores clave: notacion,herramientas y procesos.
El analisis organizacional es una metafora acerca de como construir un sistema deseado. Por este motivo es importante el aspecto de notacion o de herramientas de modelamiento que permitan expresar la mayor cantidad de detalles de un sistema con miras de ser construido y para efectos de implementacion.
No existe un determinado patron o metodologia pero usualmente se distinguen 4 dimensiones esenciales y una especial.

	-Dimension estatica: 
		Refleja los componentes que no varian en el tiempo o persisten de manera relativa por largo tiempo
	-Dimension dinamica:
		Refleja reglas y procesos que rigen la evoluvion de los componentes.
	-Dimension funcional: 
		Refleja los contenidos de los procesos de cambio que alteran y afectan a los componentes
	-Dimension organizacional:
		Refleja como los componentes se asocian a una organizacion que los acogera.
	-Dimension interaccion o interfaz
		La dimension especial, de interaccion o interfaz, no existe en terminos de un modelamiento tradicional o generico, pero en el caso de la informatica resulta relevante: refleja  las diversas interacciones que es necesario representar y que ligan un sistema informatico a su entorno.
		Existen diversos tipos de interacciones dependiendo el tipo de aplicacion.
		-Interaccion Humano - Humano
			Los profesionales de la informatica crean sistemas tecnologicos muy complejos y perfectos, pero olvidan al momento de analizar y diseñarlo que hay componentes humanos imprescindibles que no pueden olvidarse, por ejemplo quien debe apretar el boton de reset cuando se cualega el ordenador.
			El analisis y diseño no es un tema netamente tecnico, sino organizacional, por este motivo deben pensarse detalles como lo anterior.
			Existe la creencia de que todas las herramientas de analisis y diseño son para componentes tecnologicos, pero no es asi, se pueden introducir elementos para componentes humanos.
			Las maquinas son extensiones del hacer y la reflexion humana, por lo tantro si algo se olvida automatizar, algo quedara fuera de las operaciones del sistema.

		-Interaccion Maquina - Maquina
			Trata de vincular estructurar de informacion de datos entre si para transferir, copiar,mover y operar datos entre otras operaciones. Esto aparece en casos de bases de datos federadas donde los datos se transfieren entre sistemas de bases de datos diferentes estructuras y arquitecturas, sistemas de datos distribuidos donde operan diferentes sistemas operativos y de datos, sistemas web apoyados por estructuras como XML, etc.

		-Interaccion Humano - Maquina
			Es la interaccion Persona-Ordenador  es un area de estudio centrada en el fenomeno de interaccion entre usuarios y sistemas informaticos, cuyo objetivo es proporcionar bases teoricas, metodologicas y practicas para el diseño y evaluacion de productos interactivos que puedan ser usados de forma eficiente, eficaz, segura y satisfactoria.

	Sintesis
		En este sentido es necesario conocer:
			-Las herramientas que usara el sistema: arquitecturas, componentes, bases de datos, pantallas.
			-Los procesos organizacionales y su vinculacion  con los procesos que surgen de la incorporacion de la tecnologia a estos procesos.
			-La notacion mas clara y precisa para expresar estas dimensiones.
		Hay que añadir que cubrir las 5 dimensiones permite dar una mayor completitud a un sistema al momento de ser modelado.
		La parte compleja de desarrollar las dimensiones proviene de la integracion de la informacion que se recoge en cada una y que sea compatible con todas las dimensiones.


***3.1.2 Hacia el modelado visual de las dimensiones***

Es importante utilizar un modelado visual que permita capturar parte esencial del sistema, manejar la complejidad, definir la arquitectura del software, modelar el sistema independiente del lenguaje de implementacion y que promueva la reutilizacion.
A continuacion se describen brevemente los dos instrumentos mas empleados en la historia del analisis y diseño de sistemas.
-Analisis estructurado moderno
	Es un metodo para el analisis de sistemas manuales o automatizados, que conduce al desarrollo de especificaciones para sistemas nuevos o para efectuar modificaciones a los ya existentes. Cuando los analistas abordan una situacion poco familiar , siempre existe una pregunta sobre donde comenzar el analisis.
	El analisis estructurado permite al analista conocer un sistema o proceso en forma logica y manejable al mismo tiempo que proporciona la base para asegurar que no omite ningun detalle pertinente.
	El objetivo que persigue el analisis estructurado es organizar las tareas asociadas con la determinacion de requerimientos para obtener la comprension completa y exacta de una situacion dada. A partir de aqui determina los requerimientos que seran la base de un sistema.
	Este tipo de analisis hace uso de los siguientes componentes
		-Simbolos graficos en diagramas de flujo de datos, diagramas entidad relacion y diagramas de transicion.
		-Diccionario de datos
		-Descripciones de procesos y procedimientos
		-Reglas

-UML (Unified Modeling Language)

El modelado visual mas utilizado, combina notaciones provenientes desde: Modelado orientado a objetos, modelado de datosm modelado de componentes y modelado de flujos de trabajo(workflows)

-Diagramas de estructuras
	*Diagramas de casos de uso
		Describen bajo la forma de acciones y reacciones el comportamiento de un sistema desde el punto de vista del usuario, permite definir los limites del sistema y las relaciones entre el sistema y el entorno. Son descripciones de la funcionalidad del sistema independientes de la implementacion. Es una tecnica para capturar informacion de como un sistema o negocio trabaja actualmente, o de como se desea que trabaje, es una manera para capturar requisitos.
	*Diagramas de clases/objetos
		Es el diagrama principal para el analisis y diseño, presenta las clases y objetos del sistema con sus relaciones estructurales  y de herencia.

-Diagramas de interaccion
	*Diagrama de secuencia
		Son los mas adecuados para observar la perspectiva cronologica de las interacciones, muestra la secuencia de mensajes entre objetos durante un escenario concreto.
	*Diagrama de colaboracion
		Estos diagramas ofrecen un vision espacial, mostrando los enlaces de comunicacion entre objetos, normalmente el diagrama de colaboracion se obtiene a partir del correspondiente diagrama de secuencia

-Diagrama de comportamiento
	*Diagrama de actividades
		Es una variante de los diagramas de estados, organizado respecto de las acciones y principalmente destinado a representar el comportamiento interno de  un metodo, de un caso de uso o de un proceso de negocio
	*Diagrama de estados
		Representan automatas de estados finitos, desde el punto de vista de los estados y las transiciones, son utiles solo para objetos con comportamiento significativo, el resto de objetos se puede considerar que tiene un unico estado.
		Cada objeto esta en un estado encierto instante, el estado esta caracterizado parcialmente por los valores de los atributos del objeto, el estado en el que se encunetra un objeto determina su comportamiento, cada objeto sigue el comportamiento descrito en el diagrama de estados asociado a su clase.

-Diagrama de implementacion
	*Diagrama de despliegue
		Muestran la disposicion fisica de los distintos nodos que componen un sistema y el reparto de los componentes sobre dichos nodos.
	*Diagrama de componentes
		Describen los elementos fisicos del sistema y sus relaciones, muestran las opciones de realizacion incluyendo codigo fuente, binario y ejecutable. Los componentes representan todos los tipos de elementos software que entran en la creacion de la aplicacion. Pueden ser simples archivos, paquetes de cierto lenguaje, bibliotecas cargadas dinamicamente.


DIMENSIONES VS DIAGRAMAS

En este apartado se abordan las diferentes dimensiones de modelamiento que interesa tratar. La intencion es dar una amplia vision de la importancia de la completitud del modelado. Por este motivo se revisan las dimensiones primero frente al Analisis Estructurado Moderno para comenzar viendo la importancia de un modelado balanceado y segundo con UML

3.2.1 Dimensiones vs Analisis Estructurado Moderno

El analisis estructurado moderno es una propuesta avanzada de Yourdon al unificar varias herramientas de modelado que se usaban de manera dispersa o no integrada. Este analisis incluyo las siguientes herramientas:
	-Diagramas de Flujo de Datos
	-Diccionario de Datos
	-Especificacion de Procesos
	-Diagrama Entidad-Relacion
	-Diagrama de Transicion de Estados 

Con estos diagramas lo que se desea es:
	-Que el Diagrama de Flujo de Datos enfoque la atencion del lector en las funciones del sistema, sin permitir que las relaciones entre datos distraigan su atencion.
	-Que el Diagrama Entidad-Relacion enfoque la atencion en las relaciones entre datos , sin permitir distraccion por las caracteristicas funcionales
	-Que el diagrama de Transiscion enfoque la atencion en las caracteristicas de tiempo sin la distraccion de las funciones a los datos
Por su parte, el diccionario de datos y la especificacion de procesos completan la informacion de estos diagramas

Cada una de estas herramientas segun la dimension en que se usa, enfoca un aspecto critico del sistema a modelar. Esto es muy important pues significa que quien lee el modelo a traves de un diagrama se esta enfocando siempre en un solo aspecto critico, es decir el aspecto al cual la herramienta de modelado esta atrayendo su atencion. Como la realidad de un sistema es mayor a la del observador, es claro que el sistema tiene tantos grados de complejidad como enfoques o dimensiones. Estas dimensiones ya conocidas son:
	-Dimension estatica abordada mediante diagrama entidad-relacion y diccionarios de datos
	-Dimension funcional abordada mediante diagramas de flujos de datos, especificaciones de procesos y diccionarios de datos
	-Dimension dinamica abordada mediante diagramas de transicion de estados y diccionarios de datos

La dimension organizacional no queda abordada y la dimension interfaz no aparece cubierta salvo por una relacion simple entre los flujos de datos de la interfaz humano-maquina, donde cada flujo se codifica y se asocia a una pantalla que se representa visualmente.

...


3.2.1

...

Balanceo de dimensiones

-Reglas de balanceo entre Diagramas de Flujos de Datos(DFD) y Diccionario de Datos(DD)
	-Cada flujo de datos y cada almacen de datos deben estar defindos en el diccionario de datos. Si falta la definicion en el diccionario, el flujo o el almacen se considera indefinido.
	-De manera inversa, cada dato y cada almacen que se define en el diccionario de datos debe aparecer en alguna parte del DFD. Si no aparece, dicho dato o almacen es un "fantasma", es decir algo definido pero que no se usa en el sistema. Esto puede suceder si los datos se definieron para que correspondieran con una version temprana del DFD, el peligro que se corre es que el DFD pudiera cambiarse sin un cambio correspondiente en el diccionario de datos.

-Reglas de balanceo entre Diagrama de Flujo de Datos (DFD) y Especificacion de Procesos (EP)
	-Cada burbuja del DFD debe asociarse con un DFD de nivel inferior o con una especificacion de proceso, pero no ambos. Si el DFD muestra una burbuja que se identifica como 1.4.2 debe existir ya sea una figura correspondiente identificada como 1.4.2 cuyas burbujas se identifiquen como 1.4.2.1, 1.4.2.2 , etc. O bine la especificacion estructurada debe contener una especificacion de prooceso para la burbuja 1.4.2, si ambas existen el modelo es innecesario y redundante.
	-Cada especificacion de proceso debe tenert una burbuja de nivel inferior asociada en el DFD. Dado que la especificacion del proceso requiere de mucho trabajo, podria pensarse que es altamente improbable que existan especificaciones de proceso "vagabundas" rondando por el sistema. Pero puede suceder, las especificaciones del proceso pudieran haberse escrito para una version preliminar del DFD, tras lo cual un proceso de revision pudo eliminarl algunas de las burbujas del DFD.
	-Las entradas y salidad deben coincidir. El DFD muestr flujos de entrada y salida para cada burbuja. Esto debe ser evidente en la especificacion de proceso tambien, asi que se espera una declaracion READ( GET,INPUT,etc) a cada flujo de entrada y WRITE (PUT, DISPLAY,etc) para cada flujo de salida.


.... Reglas de Balanceo  libro tema 3.2.1

***Dimensiones vs UML











































